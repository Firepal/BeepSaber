[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[ext_resource path="res://game/data/BeepCube_Emission.png" type="Texture" id=1]
[ext_resource path="res://game/data/dither.png" type="Texture" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode cull_disabled,specular_blinn;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_emission : hint_black_albedo;
uniform sampler2D texture_bayer : hint_black_albedo;

uniform bool cutted = false;
uniform bool inverted_cut = false;
uniform mat4 cut_matrix;
uniform float cut_vanish = 0.0;
uniform float cut_white_margin = 0.06;

mat3 facedir(vec3 dir,vec3 up){
	vec3 c = normalize(dir);
	vec3 a = normalize(cross(c,up));
	vec3 b = normalize(cross(a,c));
	return mat3(a,b,c);
}

mat3 rotation3dZ(float angle) {
	float s = sin(angle);
	float c = cos(angle);

	return mat3(
		vec3(c, s, 0.0),
		vec3(-s, c, 0.0),
		vec3(0.0, 0.0, 1.0)
	);
}
varying float cut_interp;
//varying mat3 cut_matrix;
void vertex() {
//	cut_matrix = rotation3dZ(radians(-cut_angle));
	vec3 cut_sample = (cut_matrix * vec4(VERTEX,1.0)).xyz;
	cut_interp = cut_sample.x;
	if (inverted_cut) { cut_interp = -cut_interp; }
	
	cut_interp -= cut_vanish;
	
	// Rotates cube towards the player. Does not affect CPU-side bounding box
//	vec3 to_cam = -(CAMERA_MATRIX[3].xyz-WORLD_MATRIX[3].xyz)*mat3(WORLD_MATRIX);
//	to_cam = mix(to_cam,vec3(0.0,0.0,-1.0),min(0.5+smoothstep(0.0,0.3,cut_vanish),1.0));
//	VERTEX = -(facedir(to_cam,vec3(0.0,-1.0,0.0))*VERTEX);
//	NORMAL = -(facedir(to_cam,vec3(0.0,-1.0,0.0))*NORMAL);
}

float sdf( vec2 uv, float offset ){
	const float ARROW_WIDTH = 3.8;
	const float _arrow_pos = (ARROW_WIDTH/4.0);
	
	vec2 boxUV = (uv*vec2(ARROW_WIDTH,10.0))-vec2(_arrow_pos,1.3);
	boxUV = 0.75-abs(boxUV);
	boxUV = smoothstep(vec2(0.0),vec2(0.7,1.5)*offset,boxUV);
	vec2 triangle = (uv*vec2(2.0,4.0))-vec2(0.5,0.1);
	triangle = 0.333-abs(triangle);
	
	float minedbox = boxUV.x * boxUV.y;
	minedbox *= smoothstep(0.0, offset, dot(vec2(1.0),triangle));
	vec2 anydirUV = uv-vec2(0.75,0.25);
	minedbox += smoothstep(0.015, 0.015-(offset*0.05), dot(anydirUV,anydirUV) );
	return minedbox;
}

void fragment() {
	ALBEDO = albedo.rgb;
	METALLIC = 1.0;
	ROUGHNESS = 0.35;
//	EMISSION = texture(texture_emission,UV).rgb;
	EMISSION = vec3(sdf(UV,
	sqrt(-VERTEX.z * dot(vec2(0.0000006),VIEWPORT_SIZE))
	));
	
	if (!FRONT_FACING)	EMISSION = vec3(1.0);
	if (cutted){
		if (cut_interp < 0.0) { discard; }
		ALPHA = cut_interp*20.0;
		ALPHA_SCISSOR = texture(texture_bayer,FRAGCOORD.xy/8.0).r;
		float yes = smoothstep(cut_white_margin, cut_white_margin*0.2, cut_interp);
		EMISSION += yes;
	}
}"

[resource]
shader = SubResource( 1 )
shader_param/albedo = Color( 1, 0, 0, 1 )
shader_param/cutted = false
shader_param/inverted_cut = false
shader_param/cut_matrix = null
shader_param/cut_vanish = 0.101
shader_param/cut_white_margin = 0.06
shader_param/texture_emission = ExtResource( 1 )
shader_param/texture_bayer = ExtResource( 2 )
