[gd_scene load_steps=8 format=2]

[ext_resource path="res://game/data/BeepCube.mesh" type="ArrayMesh" id=1]
[ext_resource path="res://game/BeepCube.gd" type="Script" id=2]
[ext_resource path="res://game/data/BeepCube_Emission.png" type="Texture" id=3]

[sub_resource type="BoxShape" id=1]
extents = Vector3( 0.25, 0.2, 0.35 )

[sub_resource type="Shader" id=2]
code = "shader_type spatial;
render_mode specular_blinn,cull_disabled,unshaded;

uniform vec4 albedo : hint_color;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_emission : hint_black_albedo;

uniform bool cutted = false;
uniform bool inverted_cut = false;
uniform float cut_pos = 0.0;
uniform float cut_angle = 0.0;
uniform float cut_white_margin = 0.06;

mat3 facevec(vec3 vector){
	vec3 c = normalize(vector);
	vec3 a = normalize(cross(c,vec3(0.0,1.0,0.0)));
	vec3 b = cross(a,c);
	return mat3(a,b,c);
}
mat3 rotation3dZ(float angle) {
	float s = sin(angle);
	float c = cos(angle);

	return mat3(
		vec3(c, s, 0.0),
		vec3(-s, c, 0.0),
		vec3(0.0, 0.0, 1.0)
	);
}
varying float cut_interp;
varying mat3 cut_matrix;
void vertex() {
	cut_matrix = rotation3dZ(radians(-cut_angle));
	vec3 cut_sample = cut_matrix * -(VERTEX-(cut_pos/3.0));
	cut_interp = cut_sample.x;
	if (inverted_cut) {
		cut_interp = -cut_interp;
	}
	vec3 tocam = -(CAMERA_MATRIX[3].xyz-WORLD_MATRIX[3].xyz)*mat3(WORLD_MATRIX);
//	tocam *= vec3(1.0,0.0,1.0);
	UV2 = (-normalize(VERTEX*mat3(WORLD_MATRIX)*facevec(tocam)).xy*0.5)+0.5;
	UV2.x *= -1.0;
}


float random12(vec2 p){
	vec3 p3  = fract(vec3(p.xyx) * .1031);
	p3 += dot(p3, p3.yzx + 33.33);
	return fract((p3.x + p3.y) * p3.z);
}
float noise2d(vec2 st) {
	vec2 i = floor(st);
	vec2 f = fract(st);

	float a = random12(i);
	float b = random12(i + vec2(1.0, 0.0));
	float c = random12(i + vec2(0.0, 1.0));
	float d = random12(i + vec2(1.0, 1.0));
	
	vec2 u = smoothstep(0.0,1.0,f);
//	vec2 u = smoothstep(0.0,1.0,f);
	
	return mix(a, b, u.x) +
			(c - a)* u.y * (1.0 - u.x) +
			(d - b) * u.x * u.y;
}
float fBm(vec2 x) {
	float v = 0.0;
	float a = 0.5;
	vec2 shift = vec2(200.0);
	const int OCTAVES = 3;
	for (int i = 0; i < OCTAVES; ++i) {
		v += a * noise2d(x);
		x = x * 1.5 + shift;
		a *= 0.5;
	}
	return v;
}

void fragment() {
	float noise = fBm(UV2*4.0);
	noise = smoothstep(0.7,0.0,noise);
//	ALBEDO = albedo.rgb*noise;
	float f = pow(1.0-dot(NORMAL,VIEW),2.0);
	noise += f;
	ALBEDO = (albedo.rgb)+(noise*0.7);
	METALLIC = metallic;
	ROUGHNESS = 0.34;
	ALBEDO += texture(texture_emission,UV).rgb;
	if(!FRONT_FACING){ ALBEDO = vec3(1.0); }
	if(cutted){
//		ALPHA = smoothstep(-0.02,0.0,cut_interp);
		if(cut_interp < 0.0) { discard; }
		
		float yes = smoothstep(cut_white_margin, 0.02, cut_interp);
		ALBEDO += yes;
	}
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/albedo = Color( 1, 0, 0, 1 )
shader_param/metallic = 1.0
shader_param/roughness = 0.341
shader_param/cutted = false
shader_param/inverted_cut = false
shader_param/cut_pos = 0.0
shader_param/cut_angle = 0.0
shader_param/cut_white_margin = 0.06
shader_param/texture_emission = ExtResource( 3 )

[sub_resource type="Animation" id=4]
length = 0.8
tracks/0/type = "value"
tracks/0/path = NodePath(".:translation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.8 ),
"transitions": PoolRealArray( 0.5, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, -2 ), Vector3( 0, 0, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.6, 0.8 ),
"transitions": PoolRealArray( 0.217638, -0.5, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, -90 ), Vector3( 0, 0, 5 ), Vector3( 0, 0, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.8 ),
"transitions": PoolRealArray( 0.1, 1 ),
"update": 0,
"values": [ Vector3( 0.1, 0.1, 0.1 ), Vector3( 1, 1, 1 ) ]
}

[node name="BeepCube" type="Spatial"]
script = ExtResource( 2 )

[node name="CubeMeshOrientation" type="Spatial" parent="."]

[node name="BeepCube_Area" type="Area" parent="CubeMeshOrientation" groups=[
"beepcube",
]]
collision_layer = 2
collision_mask = 16

[node name="CollisionShape" type="CollisionShape" parent="CubeMeshOrientation/BeepCube_Area"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0.1 )
shape = SubResource( 1 )

[node name="CubeMeshAnimation" type="Spatial" parent="CubeMeshOrientation"]

[node name="BeepCube_Mesh" type="MeshInstance" parent="CubeMeshOrientation/CubeMeshAnimation"]
transform = Transform( 0.8, 0, 0, 0, 0.8, 0, 0, 0, 0.8, 0.000240445, 0.00480008, -0.000946641 )
material_override = SubResource( 3 )
mesh = ExtResource( 1 )
material/0 = null

[node name="AnimationPlayer" type="AnimationPlayer" parent="CubeMeshOrientation/CubeMeshAnimation"]
anims/Spawn = SubResource( 4 )
